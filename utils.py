#!/usr/bin/env python3
"""
NetTrace - Production-ready OSINT domain analysis tool
Main utilities and classes with robust error handling
"""

import os
import re
import sys
import json
import time
import socket
import ssl
import whois
import requests
import subprocess
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Any, Union
from urllib.parse import urlparse, urljoin
from concurrent.futures import ThreadPoolExecutor, as_completed
import logging
from functools import wraps

# Configuration des imports
try:
    import dns.resolver
    import dns.exception
    DNS_AVAILABLE = True
except ImportError:
    DNS_AVAILABLE = False
    print("‚ö†Ô∏è  dnspython non disponible. Installation: pip install dnspython")

try:
    from colorama import init, Fore, Back, Style
    init(autoreset=True)
    COLORS_AVAILABLE = True
except ImportError:
    COLORS_AVAILABLE = False
    # Fallback sans couleurs
    class MockColor:
        def __getattr__(self, name): return ""
    Fore = Back = Style = MockColor()

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/nettrace.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# D√©corateur pour la gestion d'erreurs
def handle_errors(func):
    """D√©corateur pour la gestion robuste des erreurs"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"Erreur dans {func.__name__}: {str(e)}")
            return None
    return wrapper

# Validation des entr√©es
def validate_domain(domain: str) -> bool:
    """Valide un nom de domaine"""
    if not domain or not isinstance(domain, str):
        return False
    
    domain = domain.strip().lower()
    
    # Regex pour validation basique
    pattern = r'^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$'
    
    if not re.match(pattern, domain):
        return False
    
    # V√©rifications suppl√©mentaires
    if len(domain) > 253:
        return False
    
    if '..' in domain or domain.startswith('.') or domain.endswith('.'):
        return False
    
    return True

def sanitize_input(text: str) -> str:
    """Nettoie et s√©curise les entr√©es utilisateur"""
    if not isinstance(text, str):
        return ""
    
    # Supprimer les caract√®res dangereux
    text = re.sub(r'[<>"\';\\]', '', text)
    return text.strip()

# Configuration
from config.settings import (
    CACHE_DIR, REPORTS_DIR, LOGS_DIR, REQUEST_TIMEOUT, 
    DEFAULT_HEADERS, TECHNOLOGY_SIGNATURES, SECURITY_HEADERS
)
from core.cache import cache
from core.display import (
    print_banner, print_section, print_success, 
    print_error, print_warning, print_info
)

class DomainAnalyzer:
    """Production-ready domain analyzer with comprehensive error handling"""
    
    def __init__(self, domain: str, verbose: bool = False):
        if not validate_domain(domain):
            raise ValueError(f"Domaine invalide: {domain}")
        
        self.domain = domain.lower().strip()
        self.verbose = verbose
        self.session = requests.Session()
        self.session.headers.update(DEFAULT_HEADERS)
        self.session.timeout = REQUEST_TIMEOUT
        
        # Configuration des timeouts et retry
        from requests.adapters import HTTPAdapter
        from urllib3.util.retry import Retry
        
        retry_strategy = Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)
        
        logger.info(f"Analyseur initialis√© pour {self.domain}")
    
    @handle_errors
    def run_quick_analysis(self) -> Dict:
        """Analyse rapide : WHOIS + DNS + Technologies de base"""
        print_info("üöÄ Lancement de l'analyse rapide...")
        
        results = {
            'domain': self.domain,
            'timestamp': datetime.now().isoformat(),
            'analysis_type': 'quick',
            'analysis': {}
        }
        
        try:
            # WHOIS
            print_info("üìã Analyse WHOIS...")
            results['analysis']['whois'] = self.get_whois_info()
            
            # DNS
            print_info("üåê R√©solution DNS...")
            results['analysis']['dns'] = self.get_dns_records()
            
            # Technologies web basiques
            print_info("üíª D√©tection des technologies...")
            results['analysis']['web_technologies'] = self.get_basic_web_technologies()
            
            # Score de confiance
            results['analysis']['trust_score'] = self.calculate_trust_score(results['analysis'])
            
        except Exception as e:
            logger.error(f"Erreur analyse rapide: {str(e)}")
            results['error'] = str(e)
        
        return results
    
    @handle_errors
    def run_standard_analysis(self) -> Dict:
        """Analyse standard : Rapide + S√©curit√© + R√©putation basique"""
        print_info("üöÄ Lancement de l'analyse standard...")
        
        # Commencer par l'analyse rapide
        results = self.run_quick_analysis()
        results['analysis_type'] = 'standard'
        
        try:
            # S√©curit√©
            print_info("üîí Analyse de s√©curit√©...")
            results['analysis']['security'] = self.get_security_analysis()
            
            # R√©putation basique
            print_info("üõ°Ô∏è V√©rification de r√©putation...")
            results['analysis']['reputation'] = self.get_basic_reputation()
            
            # Score de s√©curit√©
            results['analysis']['security_score'] = self.calculate_security_score(results['analysis'])
            
        except Exception as e:
            logger.error(f"Erreur analyse standard: {str(e)}")
            results.setdefault('errors', []).append(str(e))
        
        return results
    
    @handle_errors
    def run_full_analysis(self) -> Dict:
        """Analyse compl√®te : Standard + G√©olocalisation + Sous-domaines + Monitoring"""
        print_info("üöÄ Lancement de l'analyse compl√®te...")
        
        # Commencer par l'analyse standard
        results = self.run_standard_analysis()
        results['analysis_type'] = 'complete'
        
        try:
            # Sous-domaines
            print_info("üîç Recherche de sous-domaines...")
            results['analysis']['subdomains'] = self.get_subdomains()
            
            # G√©olocalisation
            print_info("üåç G√©olocalisation...")
            results['analysis']['geolocation'] = self.get_geolocation_info()
            
            # R√©putation avanc√©e
            print_info("üõ°Ô∏è Analyse de r√©putation avanc√©e...")
            results['analysis']['reputation'] = self.get_advanced_reputation()
            
            # Recalculer les scores avec toutes les donn√©es
            results['analysis']['trust_score'] = self.calculate_trust_score(results['analysis'])
            results['analysis']['security_score'] = self.calculate_security_score(results['analysis'])
            results['analysis']['reputation_score'] = self.calculate_reputation_score(results['analysis'])
            
        except Exception as e:
            logger.error(f"Erreur analyse compl√®te: {str(e)}")
            results.setdefault('errors', []).append(str(e))
        
        return results
    
    @handle_errors
    def get_whois_info(self) -> Dict:
        """R√©cup√®re les informations WHOIS"""
        cache_key = f"whois_{self.domain}"
        cached = cache.get(cache_key, 'whois')
        if cached:
            return cached
        
        whois_info = {
            'registrar': None,
            'creation_date': None,
            'expiration_date': None,
            'registrant': None,
            'status': None,
            'name_servers': [],
            'emails': []
        }
        
        try:
            if self.verbose:
                print_info(f"Requ√™te WHOIS pour {self.domain}...")
            
            w = whois.whois(self.domain)
            
            if w:
                whois_info.update({
                    'registrar': str(w.registrar) if w.registrar else None,
                    'creation_date': str(w.creation_date[0]) if isinstance(w.creation_date, list) and w.creation_date else str(w.creation_date) if w.creation_date else None,
                    'expiration_date': str(w.expiration_date[0]) if isinstance(w.expiration_date, list) and w.expiration_date else str(w.expiration_date) if w.expiration_date else None,
                    'registrant': str(w.registrant) if w.registrant else None,
                    'status': str(w.status[0]) if isinstance(w.status, list) and w.status else str(w.status) if w.status else None,
                    'name_servers': [str(ns) for ns in w.name_servers] if w.name_servers else [],
                    'emails': [str(email) for email in w.emails] if w.emails else []
                })
        
        except Exception as e:
            whois_info['error'] = str(e)
            if self.verbose:
                print_warning(f"Erreur WHOIS: {str(e)}")
        
        cache.set(cache_key, whois_info, 'whois')
        return whois_info
    
    @handle_errors
    def get_dns_records(self) -> Dict:
        """R√©cup√®re les enregistrements DNS"""
        if not DNS_AVAILABLE:
            return {'error': 'dnspython non disponible'}
        
        cache_key = f"dns_{self.domain}"
        cached = cache.get(cache_key, 'dns')
        if cached:
            return cached
        
        dns_records = {
            'A': [],
            'AAAA': [],
            'MX': [],
            'TXT': [],
            'NS': [],
            'CNAME': []
        }
        
        record_types = ['A', 'AAAA', 'MX', 'TXT', 'NS', 'CNAME']
        
        for record_type in record_types:
            try:
                if self.verbose:
                    print_info(f"R√©solution {record_type} pour {self.domain}...")
                
                answers = dns.resolver.resolve(self.domain, record_type)
                
                for answer in answers:
                    if record_type == 'MX':
                        dns_records[record_type].append(f"{answer.preference} {answer.exchange}")
                    else:
                        dns_records[record_type].append(str(answer))
            
            except (dns.resolver.NXDOMAIN, dns.resolver.NoAnswer, dns.exception.DNSException):
                continue
            except Exception as e:
                if self.verbose:
                    print_warning(f"Erreur DNS {record_type}: {str(e)}")
                continue
        
        cache.set(cache_key, dns_records, 'dns')
        return dns_records
    
    @handle_errors
    def get_basic_web_technologies(self) -> Dict:
        """D√©tection basique des technologies web"""
        cache_key = f"webtech_{self.domain}"
        cached = cache.get(cache_key, 'http')
        if cached:
            return cached
        
        technologies = {
            'frameworks': [],
            'servers': [],
            'cdn': [],
            'analytics': [],
            'cms': []
        }
        
        try:
            url = f"https://{self.domain}"
            if self.verbose:
                print_info(f"Analyse web de {url}...")
            
            response = self.session.get(url, allow_redirects=True)
            
            # Analyse des headers
            server = response.headers.get('server', '').lower()
            if 'apache' in server:
                technologies['servers'].append('Apache')
            elif 'nginx' in server:
                technologies['servers'].append('Nginx')
            elif 'iis' in server:
                technologies['servers'].append('IIS')
            
            # CDN detection
            if 'cf-ray' in response.headers:
                technologies['cdn'].append('Cloudflare')
            elif 'x-served-by' in response.headers:
                technologies['cdn'].append('Fastly')
            
            # Analyse du contenu HTML
            html = response.text.lower()
            
            # Frameworks
            if 'react' in html or '_react' in html:
                technologies['frameworks'].append('React')
            if 'angular' in html or 'ng-' in html:
                technologies['frameworks'].append('Angular')
            if 'vue' in html or '__vue__' in html:
                technologies['frameworks'].append('Vue.js')
            if 'jquery' in html:
                technologies['frameworks'].append('jQuery')
            
            # CMS
            if 'wp-content' in html or 'wp-includes' in html:
                technologies['cms'].append('WordPress')
            if 'drupal' in html:
                technologies['cms'].append('Drupal')
            
            # Analytics
            if 'google-analytics' in html or 'gtag' in html:
                technologies['analytics'].append('Google Analytics')
            if 'googletagmanager' in html:
                technologies['analytics'].append('Google Tag Manager')
        
        except requests.RequestException as e:
            technologies['error'] = str(e)
            if self.verbose:
                print_warning(f"Erreur analyse web: {str(e)}")
        
        cache.set(cache_key, technologies, 'http')
        return technologies
    
    @handle_errors
    def get_security_analysis(self) -> Dict:
        """Analyse de s√©curit√© compl√®te"""
        cache_key = f"security_{self.domain}"
        cached = cache.get(cache_key, 'http')
        if cached:
            return cached
        
        security_info = {
            'ssl': {},
            'headers': {},
            'redirects': {},
            'score': 0
        }
        
        try:
            # Analyse SSL
            security_info['ssl'] = self.get_ssl_info()
            
            # Headers de s√©curit√©
            security_info['headers'] = self.get_security_headers()
            
            # Redirections HTTPS
            security_info['redirects'] = self.check_https_redirect()
            
        except Exception as e:
            security_info['error'] = str(e)
            if self.verbose:
                print_warning(f"Erreur analyse s√©curit√©: {str(e)}")
        
        cache.set(cache_key, security_info, 'http')
        return security_info
    
    @handle_errors
    def get_ssl_info(self) -> Dict:
        """Informations sur le certificat SSL"""
        ssl_info = {
            'valid': False,
            'issuer': None,
            'subject': None,
            'expiry_date': None,
            'protocol_version': None
        }
        
        try:
            context = ssl.create_default_context()
            
            with socket.create_connection((self.domain, 443), timeout=10) as sock:
                with context.wrap_socket(sock, server_hostname=self.domain) as ssock:
                    cert = ssock.getpeercert()
                    
                    ssl_info.update({
                        'valid': True,
                        'issuer': dict(x[0] for x in cert.get('issuer', [])),
                        'subject': dict(x[0] for x in cert.get('subject', [])),
                        'expiry_date': cert.get('notAfter'),
                        'protocol_version': ssock.version()
                    })
        
        except Exception as e:
            ssl_info['error'] = str(e)
            if self.verbose:
                print_warning(f"Erreur SSL: {str(e)}")
        
        return ssl_info
    
    @handle_errors
    def get_security_headers(self) -> Dict:
        """V√©rification des headers de s√©curit√©"""
        headers_info = {}
        
        try:
            url = f"https://{self.domain}"
            response = self.session.get(url)
            
            # Headers de s√©curit√© importants
            security_headers = [
                'strict-transport-security',
                'content-security-policy',
                'x-frame-options',
                'x-content-type-options',
                'x-xss-protection',
                'referrer-policy'
            ]
            
            for header in security_headers:
                headers_info[header] = {
                    'present': header in [h.lower() for h in response.headers.keys()],
                    'value': response.headers.get(header, None)
                }
        
        except Exception as e:
            headers_info['error'] = str(e)
            if self.verbose:
                print_warning(f"Erreur headers s√©curit√©: {str(e)}")
        
        return headers_info
    
    @handle_errors
    def check_https_redirect(self) -> Dict:
        """V√©rification de la redirection HTTPS"""
        redirect_info = {
            'http_to_https': False,
            'redirect_chain': []
        }
        
        try:
            http_url = f"http://{self.domain}"
            response = self.session.get(http_url, allow_redirects=True)
            
            redirect_info['redirect_chain'] = [r.url for r in response.history]
            redirect_info['http_to_https'] = response.url.startswith('https://')
        
        except Exception as e:
            redirect_info['error'] = str(e)
            if self.verbose:
                print_warning(f"Erreur redirection: {str(e)}")
        
        return redirect_info
    
    @handle_errors
    def get_basic_reputation(self) -> Dict:
        """V√©rification basique de r√©putation"""
        reputation_info = {
            'virustotal_url': f"https://www.virustotal.com/gui/domain/{self.domain}",
            'urlvoid_url': f"https://www.urlvoid.com/scan/{self.domain}/",
            'status': 'unknown'
        }
        
        # Pour l'instant, juste les URLs de v√©rification manuelle
        # L'int√©gration API sera ajout√©e plus tard
        
        return reputation_info
    
    @handle_errors
    def get_advanced_reputation(self) -> Dict:
        """Analyse de r√©putation avanc√©e"""
        # H√©rite de la r√©putation basique pour l'instant
        return self.get_basic_reputation()
    
    @handle_errors
    def get_subdomains(self) -> List[str]:
        """Recherche de sous-domaines via Certificate Transparency"""
        cache_key = f"subdomains_{self.domain}"
        cached = cache.get(cache_key, 'http')
        if cached:
            return cached
        
        subdomains = set()
        
        try:
            if self.verbose:
                print_info(f"Recherche de sous-domaines pour {self.domain}...")
            
            # Via crt.sh
            url = f"https://crt.sh/?q=%.{self.domain}&output=json"
            response = self.session.get(url)
            
            if response.status_code == 200:
                certificates = response.json()
                
                for cert in certificates:
                    name_value = cert.get('name_value', '')
                    for name in name_value.split('\n'):
                        name = name.strip()
                        if name and name.endswith(f'.{self.domain}'):
                            subdomains.add(name)
        
        except Exception as e:
            if self.verbose:
                print_warning(f"Erreur sous-domaines: {str(e)}")
        
        result = sorted(list(subdomains))
        cache.set(cache_key, result, 'http')
        return result
    
    @handle_errors
    def get_geolocation_info(self) -> Dict:
        """Informations de g√©olocalisation"""
        cache_key = f"geo_{self.domain}"
        cached = cache.get(cache_key, 'geolocation')
        if cached:
            return cached
        
        geo_info = {
            'ip_addresses': [],
            'geolocation': []
        }
        
        try:
            # R√©solution IP
            ips = socket.getaddrinfo(self.domain, None)
            unique_ips = list(set([ip[4][0] for ip in ips]))
            geo_info['ip_addresses'] = unique_ips
            
            # G√©olocalisation de la premi√®re IP
            if unique_ips:
                ip = unique_ips[0]
                geo_data = self.geolocate_ip(ip)
                if geo_data:
                    geo_info['geolocation'].append(geo_data)
        
        except Exception as e:
            geo_info['error'] = str(e)
            if self.verbose:
                print_warning(f"Erreur g√©olocalisation: {str(e)}")
        
        cache.set(cache_key, geo_info, 'geolocation')
        return geo_info
    
    @handle_errors
    def geolocate_ip(self, ip: str) -> Optional[Dict]:
        """G√©olocalise une adresse IP"""
        try:
            url = f"http://ip-api.com/json/{ip}"
            response = self.session.get(url)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('status') == 'success':
                    return {
                        'ip': ip,
                        'country': data.get('country'),
                        'region': data.get('regionName'),
                        'city': data.get('city'),
                        'isp': data.get('isp'),
                        'organization': data.get('org')
                    }
        except Exception:
            pass
        
        return None
    
    def calculate_trust_score(self, analysis: Dict) -> Dict:
        """Calcule le score de confiance"""
        score = 0
        max_score = 100
        details = []
        
        try:
            # Anciennet√© du domaine (30 points max)
            whois_data = analysis.get('whois', {})
            if whois_data.get('creation_date'):
                try:
                    from dateutil.parser import parse
                    creation_date = parse(whois_data['creation_date'])
                    age_years = (datetime.now() - creation_date).days / 365.25
                    
                    if age_years >= 10:
                        score += 30
                        details.append("Domaine tr√®s ancien (10+ ans) (+30 pts)")
                    elif age_years >= 3:
                        score += 20
                        details.append("Domaine √©tabli (3-10 ans) (+20 pts)")
                    elif age_years >= 1:
                        score += 10
                        details.append("Domaine r√©cent (1-3 ans) (+10 pts)")
                    else:
                        details.append("Domaine tr√®s r√©cent (<1 an) (+0 pts)")
                except:
                    pass
            
            # Enregistrements DNS (25 points max)
            dns_data = analysis.get('dns', {})
            dns_score = 0
            
            if dns_data.get('A'):
                dns_score += 8
            if dns_data.get('MX'):
                dns_score += 8
            if dns_data.get('NS'):
                dns_score += 9
            
            score += dns_score
            details.append(f"Enregistrements DNS (+{dns_score} pts)")
            
            # Sous-domaines (20 points max)
            subdomains = analysis.get('subdomains', [])
            subdomain_count = len(subdomains) if isinstance(subdomains, list) else 0
            
            if subdomain_count >= 50:
                score += 20
                details.append("Nombreux sous-domaines (50+) (+20 pts)")
            elif subdomain_count >= 20:
                score += 15
                details.append("Sous-domaines multiples (20-49) (+15 pts)")
            elif subdomain_count >= 5:
                score += 10
                details.append("Quelques sous-domaines (5-19) (+10 pts)")
            elif subdomain_count > 0:
                score += 5
                details.append("Peu de sous-domaines (1-4) (+5 pts)")
            
            # WHOIS complet (15 points max)
            whois_score = 0
            if whois_data.get('registrar'):
                whois_score += 5
            if whois_data.get('registrant'):
                whois_score += 5
            if whois_data.get('status'):
                whois_score += 5
            
            score += whois_score
            details.append(f"Informations WHOIS (+{whois_score} pts)")
            
            # Technologies web (10 points max)
            web_tech = analysis.get('web_technologies', {})
            tech_count = 0
            for tech_list in web_tech.values():
                if isinstance(tech_list, list):
                    tech_count += len(tech_list)
            
            if tech_count >= 5:
                score += 10
                details.append("Technologies web d√©tect√©es (+10 pts)")
            elif tech_count > 0:
                score += 5
                details.append("Quelques technologies d√©tect√©es (+5 pts)")
        
        except Exception as e:
            logger.error(f"Erreur calcul score confiance: {str(e)}")
        
        # D√©terminer le niveau
        if score >= 80:
            level = "√âLEV√â"
        elif score >= 60:
            level = "MOYEN"
        else:
            level = "FAIBLE"
        
        return {
            'score': min(score, max_score),
            'max_score': max_score,
            'level': level,
            'details': details
        }
    
    def calculate_security_score(self, analysis: Dict) -> Dict:
        """Calcule le score de s√©curit√©"""
        score = 0
        max_score = 100
        details = []
        
        try:
            security_data = analysis.get('security', {})
            
            # SSL/TLS (30 points max)
            ssl_data = security_data.get('ssl', {})
            if ssl_data.get('valid'):
                score += 20
                details.append("Certificat SSL valide (+20 pts)")
                
                if ssl_data.get('protocol_version') in ['TLSv1.2', 'TLSv1.3']:
                    score += 10
                    details.append("Protocole TLS moderne (+10 pts)")
            
            # Headers de s√©curit√© (40 points max)
            headers_data = security_data.get('headers', {})
            headers_score = 0
            
            important_headers = [
                'strict-transport-security',
                'content-security-policy',
                'x-frame-options',
                'x-content-type-options'
            ]
            
            for header in important_headers:
                if isinstance(headers_data.get(header), dict):
                    if headers_data[header].get('present'):
                        headers_score += 10
            
            score += headers_score
            details.append(f"Headers de s√©curit√© (+{headers_score} pts)")
            
            # Redirection HTTPS (15 points max)
            redirects = security_data.get('redirects', {})
            if redirects.get('http_to_https'):
                score += 15
                details.append("Redirection HTTPS active (+15 pts)")
            
            # Technologies s√©curis√©es (15 points max)
            web_tech = analysis.get('web_technologies', {})
            if web_tech.get('cdn'):
                score += 10
                details.append("CDN d√©tect√© (+10 pts)")
            
            if web_tech.get('frameworks'):
                score += 5
                details.append("Frameworks modernes (+5 pts)")
        
        except Exception as e:
            logger.error(f"Erreur calcul score s√©curit√©: {str(e)}")
        
        # D√©terminer le niveau
        if score >= 80:
            level = "EXCELLENT"
        elif score >= 60:
            level = "BON"
        elif score >= 40:
            level = "MOYEN"
        else:
            level = "FAIBLE"
        
        return {
            'score': min(score, max_score),
            'max_score': max_score,
            'level': level,
            'details': details
        }
    
    def calculate_reputation_score(self, analysis: Dict) -> Dict:
        """Calcule le score de r√©putation"""
        # Score de base √©lev√©
        score = 90
        details = ["Score de base (+90 pts)"]
        
        # Pour l'instant, score basique
        # L'int√©gration avec les APIs de r√©putation sera ajout√©e plus tard
        
        return {
            'score': score,
            'max_score': 100,
            'level': "BON",
            'details': details
        }
    
    def display_results(self, results: Dict):
        """Affiche les r√©sultats de l'analyse de mani√®re robuste"""
        if not results or 'analysis' not in results:
            print_error("‚ùå Aucun r√©sultat √† afficher")
            return
        
        analysis = results['analysis']
        domain = results.get('domain', 'Unknown')
        
        print_info(f"\nüéØ Analyse du domaine: {domain}")
        print_info("=" * 60)
        
        # WHOIS
        if 'whois' in analysis:
            self._display_whois(analysis['whois'])
        
        # DNS
        if 'dns' in analysis:
            self._display_dns(analysis['dns'])
        
        # Technologies Web
        if 'web_technologies' in analysis:
            self._display_web_technologies(analysis['web_technologies'])
        
        # S√©curit√©
        if 'security' in analysis:
            self._display_security(analysis['security'])
        
        # G√©olocalisation
        if 'geolocation' in analysis:
            self._display_geolocation(analysis['geolocation'])
        
        # Sous-domaines
        if 'subdomains' in analysis:
            self._display_subdomains(analysis['subdomains'])
        
        # Scores
        self._display_scores(analysis)
        
        # Erreurs √©ventuelles
        if 'errors' in results:
            print_section("ERREURS")
            for error in results['errors']:
                print_warning(f"‚ö†Ô∏è  {error}")
    
    def _display_whois(self, whois_data: Dict):
        """Affiche les informations WHOIS"""
        print_section("WHOIS LOOKUP")
        
        if whois_data.get('error'):
            print_warning(f"‚ö†Ô∏è  Erreur WHOIS: {whois_data['error']}")
            return
        
        fields = [
            ('registrar', 'üè¢ Registrar'),
            ('creation_date', 'üìÖ Date de cr√©ation'),
            ('expiration_date', '‚è∞ Date d\'expiration'),
            ('registrant', 'üë§ Propri√©taire'),
            ('status', 'üìä Statut')
        ]
        
        for field, label in fields:
            value = whois_data.get(field, 'Non disponible')
            if value and value != 'None':
                print_info(f"{label}: {value}")
    
    def _display_dns(self, dns_data: Dict):
        """Affiche les enregistrements DNS"""
        print_section("R√âSOLUTION DNS")
        
        if dns_data.get('error'):
            print_warning(f"‚ö†Ô∏è  Erreur DNS: {dns_data['error']}")
            return
        
        for record_type, records in dns_data.items():
            if isinstance(records, list) and records:
                print_info(f"üîç {record_type}:")
                for i, record in enumerate(records[:3]):  # Limiter √† 3
                    print_info(f"   {record}")
                if len(records) > 3:
                    print_info(f"   ... et {len(records) - 3} autres")
    
    def _display_web_technologies(self, tech_data: Dict):
        """Affiche les technologies web"""
        print_section("TECHNOLOGIES WEB")
        
        if tech_data.get('error'):
            print_warning(f"‚ö†Ô∏è  Erreur analyse web: {tech_data['error']}")
            return
        
        categories = [
            ('servers', 'üñ•Ô∏è  Serveurs'),
            ('frameworks', '‚öõÔ∏è  Frameworks'),
            ('cdn', 'üåê CDN'),
            ('cms', 'üìù CMS'),
            ('analytics', 'üìä Analytics')
        ]
        
        for category, label in categories:
            if category in tech_data and tech_data[category]:
                technologies = tech_data[category][:5]  # Limiter √† 5
                print_info(f"{label}: {', '.join(technologies)}")
    
    def _display_security(self, security_data: Dict):
        """Affiche l'analyse de s√©curit√© de mani√®re robuste"""
        print_section("ANALYSE DE S√âCURIT√â")
        
        if security_data.get('error'):
            print_warning(f"‚ö†Ô∏è  Erreur s√©curit√©: {security_data['error']}")
            return
        
        # SSL
        ssl_data = security_data.get('ssl', {})
        if ssl_data:
            if ssl_data.get('valid'):
                print_success("‚úÖ SSL: Certificat valide")
                if ssl_data.get('issuer', {}).get('organizationName'):
                    print_info(f"üîê √âmetteur: {ssl_data['issuer']['organizationName']}")
            else:
                print_error("‚ùå SSL: Certificat invalide ou absent")
        
        # Headers de s√©curit√© - Gestion robuste
        headers_data = security_data.get('headers', {})
        if headers_data and not headers_data.get('error'):
            try:
                # Compter les headers pr√©sents de mani√®re s√©curis√©e
                headers_present = 0
                total_headers = 0
                
                for header_name, header_info in headers_data.items():
                    if header_name == 'error':
                        continue
                    
                    total_headers += 1
                    
                    # Gestion flexible des diff√©rents formats de donn√©es
                    if isinstance(header_info, dict):
                        if header_info.get('present'):
                            headers_present += 1
                    elif isinstance(header_info, bool):
                        if header_info:
                            headers_present += 1
                    elif header_info:  # Toute valeur truthy
                        headers_present += 1
                
                if total_headers > 0:
                    print_info(f"üõ°Ô∏è  Headers de s√©curit√©: {headers_present}/{total_headers} pr√©sents")
                else:
                    print_info("üõ°Ô∏è  Headers de s√©curit√©: Donn√©es non disponibles")
                    
            except Exception as e:
                print_warning(f"‚ö†Ô∏è  Erreur affichage headers: {str(e)}")
                print_info("üõ°Ô∏è  Headers de s√©curit√©: Donn√©es non disponibles")
        
        # Redirections HTTPS
        redirects = security_data.get('redirects', {})
        if redirects:
            if redirects.get('http_to_https'):
                print_success("‚úÖ HTTPS: Redirection active")
            else:
                print_warning("‚ö†Ô∏è  HTTPS: Pas de redirection automatique")
    
    def _display_geolocation(self, geo_data: Dict):
        """Affiche les informations de g√©olocalisation"""
        print_section("G√âOLOCALISATION")
        
        if geo_data.get('error'):
            print_warning(f"‚ö†Ô∏è  Erreur g√©olocalisation: {geo_data['error']}")
            return
        
        if geo_data.get('ip_addresses'):
            print_info(f"üåê Adresses IP: {', '.join(geo_data['ip_addresses'][:3])}")
        
        if geo_data.get('geolocation'):
            for geo_info in geo_data['geolocation'][:1]:  # Premi√®re seulement
                if geo_info.get('country'):
                    print_info(f"üá∫üá∏ Pays: {geo_info['country']}")
                if geo_info.get('city'):
                    print_info(f"üèôÔ∏è  Ville: {geo_info['city']}")
                if geo_info.get('organization'):
                    print_info(f"üè¢ Organisation: {geo_info['organization']}")
    
    def _display_subdomains(self, subdomains: List[str]):
        """Affiche les sous-domaines"""
        print_section("SOUS-DOMAINES")
        
        if not subdomains:
            print_info("Aucun sous-domaine trouv√©")
            return
        
        print_info(f"üìä Total: {len(subdomains)} sous-domaines trouv√©s")
        
        # Afficher les 5 premiers
        for subdomain in subdomains[:5]:
            print_info(f"üîó {subdomain}")
        
        if len(subdomains) > 5:
            print_info(f"... et {len(subdomains) - 5} autres")
    
    def _display_scores(self, analysis: Dict):
        """Affiche les scores"""
        print_section("SCORES D'√âVALUATION")
        
        scores = [
            ('trust_score', 'üéØ Score de confiance'),
            ('security_score', 'üîí Score de s√©curit√©'),
            ('reputation_score', 'üõ°Ô∏è  Score de r√©putation')
        ]
        
        for score_key, label in scores:
            if score_key in analysis:
                score_data = analysis[score_key]
                score = score_data.get('score', 0)
                level = score_data.get('level', 'INCONNU')
                
                # Couleur selon le score
                if score >= 80:
                    color_func = print_success
                elif score >= 60:
                    color_func = print_warning
                else:
                    color_func = print_error
                
                color_func(f"{label}: {score}/100 ({level})")
    
    @handle_errors
    def export_results(self, results: Dict, filename: str, format_type: str = 'json') -> bool:
        """Exporte les r√©sultats dans le format sp√©cifi√©"""
        try:
            # Cr√©er le dossier reports s'il n'existe pas
            REPORTS_DIR.mkdir(exist_ok=True)
            
            filepath = REPORTS_DIR / filename
            
            if format_type.lower() == 'json':
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(results, f, indent=2, ensure_ascii=False, default=str)
            
            elif format_type.lower() == 'html':
                from exporters.report_generator import ReportGenerator
                generator = ReportGenerator(verbose=self.verbose)
                return generator.generate_html_report(results, filename)
            
            elif format_type.lower() == 'txt':
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(f"NetTrace Report - {results.get('domain', 'Unknown')}\n")
                    f.write(f"Generated: {results.get('timestamp', 'Unknown')}\n")
                    f.write("=" * 60 + "\n\n")
                    f.write(json.dumps(results, indent=2, ensure_ascii=False, default=str))
            
            else:
                print_error(f"Format non support√©: {format_type}")
                return False
            
            print_success(f"‚úÖ Rapport export√©: {filepath}")
            return True
        
        except Exception as e:
            print_error(f"‚ùå Erreur export: {str(e)}")
            logger.error(f"Erreur export: {str(e)}")
            return False

# Menu interactif am√©lior√© et s√©curis√©
def show_interactive_menu():
    """Menu interactif principal avec gestion d'erreurs robuste"""
    while True:
        try:
            clear_screen()
            display_main_menu()
            
            choice = input(f"\n{Fore.CYAN}Votre choix: {Style.RESET_ALL}").strip()
            
            if not choice:
                continue
            
            # S√©curiser l'entr√©e
            choice = sanitize_input(choice)
            
            if choice == '1':
                handle_quick_analysis()
            elif choice == '2':
                handle_standard_analysis()
            elif choice == '3':
                handle_complete_analysis()
            elif choice == '4':
                handle_report_generation()
            elif choice == '5':
                handle_batch_analysis()
            elif choice == '6':
                handle_monitoring()
            elif choice == '7':
                handle_comparative_analysis()
            elif choice == '8':
                handle_system_check()
            elif choice == '9':
                handle_cache_management()
            elif choice.lower() in ['h', 'help']:
                show_help()
            elif choice.lower() in ['e', 'examples']:
                show_examples()
            elif choice.lower() in ['q', 'quit', 'exit']:
                print_success("üëã Au revoir !")
                break
            else:
                print_error("‚ùå Choix invalide. Tapez 'h' pour l'aide.")
                input("Appuyez sur Entr√©e pour continuer...")
        
        except KeyboardInterrupt:
            print_warning("\n‚ö†Ô∏è  Interruption d√©tect√©e")
            if input("Voulez-vous vraiment quitter ? (o/N): ").lower().startswith('o'):
                break
        except Exception as e:
            logger.error(f"Erreur menu principal: {str(e)}")
            print_error(f"‚ùå Erreur inattendue: {str(e)}")
            input("Appuyez sur Entr√©e pour continuer...")

def clear_screen():
    """Efface l'√©cran de mani√®re s√©curis√©e"""
    try:
        os.system('cls' if os.name == 'nt' else 'clear')
    except:
        print("\n" * 50)  # Fallback

def display_main_menu():
    """Affiche le menu principal am√©lior√©"""
    print_banner()
    
    # Statistiques du cache
    try:
        cache_stats = cache.get_stats()
        cache_info = f"Cache: {cache_stats['files']} fichiers ({cache_stats['total_size_mb']} MB)"
    except:
        cache_info = "Cache: Non disponible"
    
    print(f"{Fore.CYAN}üìä {cache_info}{Style.RESET_ALL}")
    print()
    
    # Menu principal avec design am√©lior√©
    menu_items = [
        ("1", "üöÄ Analyse rapide", "WHOIS + DNS + Technologies de base"),
        ("2", "üìä Analyse standard", "Rapide + S√©curit√© + R√©putation"),
        ("3", "üîç Analyse compl√®te", "Standard + G√©olocalisation + Sous-domaines"),
        ("4", "üìã Rapport automatique", "Analyse + Export HTML/JSON"),
        ("", "", ""),
        ("5", "üìÅ Analyse en lot", "Traiter plusieurs domaines"),
        ("6", "üìà Monitoring", "Surveillance continue"),
        ("7", "üìä Analyse comparative", "Comparer plusieurs domaines"),
        ("", "", ""),
        ("8", "‚öôÔ∏è  Syst√®me & D√©pendances", "V√©rification compl√®te"),
        ("9", "üóÇÔ∏è  Gestion du cache", "Statistiques et nettoyage"),
        ("", "", ""),
        ("h", "üìñ Aide", "Documentation compl√®te"),
        ("e", "üí° Exemples", "Cas d'usage pratiques"),
        ("q", "üö™ Quitter", "Fermer NetTrace")
    ]
    
    print(f"{Fore.YELLOW}‚ïî{'‚ïê' * 70}‚ïó{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}‚ïë{' ' * 25}üîç NETTRACE MENU{' ' * 25}‚ïë{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}‚ï†{'‚ïê' * 70}‚ï£{Style.RESET_ALL}")
    
    for num, title, desc in menu_items:
        if not num:  # Ligne vide
            print(f"{Fore.YELLOW}‚ïë{' ' * 70}‚ïë{Style.RESET_ALL}")
        else:
            color = Fore.GREEN if num.isdigit() else Fore.CYAN if num.isalpha() else Fore.MAGENTA
            print(f"{Fore.YELLOW}‚ïë{Style.RESET_ALL} {color}{num:>2}{Style.RESET_ALL}. {title:<25} {Fore.WHITE}{desc:<35}{Style.RESET_ALL} {Fore.YELLOW}‚ïë{Style.RESET_ALL}")
    
    print(f"{Fore.YELLOW}‚ïö{'‚ïê' * 70}‚ïù{Style.RESET_ALL}")

@handle_errors
def handle_quick_analysis():
    """G√®re l'analyse rapide"""
    domain = get_domain_input("üöÄ Analyse rapide")
    if not domain:
        return
    
    try:
        analyzer = DomainAnalyzer(domain, verbose=True)
        results = analyzer.run_quick_analysis()
        analyzer.display_results(results)
        
        if ask_export():
            export_format = get_export_format()
            if export_format:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"quick_{domain.replace('.', '_')}_{timestamp}.{export_format}"
                analyzer.export_results(results, filename, export_format)
    
    except Exception as e:
        print_error(f"‚ùå Erreur analyse rapide: {str(e)}")
        logger.error(f"Erreur analyse rapide: {str(e)}")
    
    input("\nAppuyez sur Entr√©e pour continuer...")

@handle_errors
def handle_standard_analysis():
    """G√®re l'analyse standard"""
    domain = get_domain_input("üìä Analyse standard")
    if not domain:
        return
    
    try:
        analyzer = DomainAnalyzer(domain, verbose=True)
        results = analyzer.run_standard_analysis()
        analyzer.display_results(results)
        
        if ask_export():
            export_format = get_export_format()
            if export_format:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"standard_{domain.replace('.', '_')}_{timestamp}.{export_format}"
                analyzer.export_results(results, filename, export_format)
    
    except Exception as e:
        print_error(f"‚ùå Erreur analyse standard: {str(e)}")
        logger.error(f"Erreur analyse standard: {str(e)}")
    
    input("\nAppuyez sur Entr√©e pour continuer...")

@handle_errors
def handle_complete_analysis():
    """G√®re l'analyse compl√®te"""
    domain = get_domain_input("üîç Analyse compl√®te")
    if not domain:
        return
    
    try:
        analyzer = DomainAnalyzer(domain, verbose=True)
        results = analyzer.run_full_analysis()
        analyzer.display_results(results)
        
        if ask_export():
            export_format = get_export_format()
            if export_format:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"complete_{domain.replace('.', '_')}_{timestamp}.{export_format}"
                analyzer.export_results(results, filename, export_format)
    
    except Exception as e:
        print_error(f"‚ùå Erreur analyse compl√®te: {str(e)}")
        logger.error(f"Erreur analyse compl√®te: {str(e)}")
    
    input("\nAppuyez sur Entr√©e pour continuer...")

@handle_errors
def handle_report_generation():
    """G√®re la g√©n√©ration automatique de rapports"""
    domain = get_domain_input("üìã Rapport automatique")
    if not domain:
        return
    
    try:
        print_info("üéØ G√©n√©ration automatique de rapport...")
        
        analyzer = DomainAnalyzer(domain, verbose=True)
        results = analyzer.run_full_analysis()
        analyzer.display_results(results)
        
        # Export automatique en HTML et JSON
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        base_filename = f"report_{domain.replace('.', '_')}_{timestamp}"
        
        # HTML
        html_filename = f"{base_filename}.html"
        if analyzer.export_results(results, html_filename, 'html'):
            print_success(f"‚úÖ Rapport HTML g√©n√©r√©: {html_filename}")
        
        # JSON
        json_filename = f"{base_filename}.json"
        if analyzer.export_results(results, json_filename, 'json'):
            print_success(f"‚úÖ Rapport JSON g√©n√©r√©: {json_filename}")
    
    except Exception as e:
        print_error(f"‚ùå Erreur g√©n√©ration rapport: {str(e)}")
        logger.error(f"Erreur g√©n√©ration rapport: {str(e)}")
    
    input("\nAppuyez sur Entr√©e pour continuer...")

def get_domain_input(title: str) -> Optional[str]:
    """Demande et valide un nom de domaine"""
    print(f"\n{Fore.CYAN}‚ïî{'‚ïê' * (len(title) + 4)}‚ïó{Style.RESET_ALL}")
    print(f"{Fore.CYAN}‚ïë  {title}  ‚ïë{Style.RESET_ALL}")
    print(f"{Fore.CYAN}‚ïö{'‚ïê' * (len(title) + 4)}‚ïù{Style.RESET_ALL}")
    
    while True:
        domain = input(f"\n{Fore.GREEN}Domaine √† analyser: {Style.RESET_ALL}").strip()
        
        if not domain:
            print_warning("‚ö†Ô∏è  Veuillez saisir un domaine")
            continue
        
        domain = sanitize_input(domain)
        
        if validate_domain(domain):
            return domain.lower()
        else:
            print_error("‚ùå Domaine invalide. Format attendu: example.com")
            retry = input("R√©essayer ? (O/n): ").strip().lower()
            if retry.startswith('n'):
                return None

def ask_export() -> bool:
    """Demande si l'utilisateur veut exporter"""
    response = input(f"\n{Fore.YELLOW}Exporter le rapport ? (O/n): {Style.RESET_ALL}").strip().lower()
    return not response.startswith('n')

def get_export_format() -> Optional[str]:
    """Demande le format d'export"""
    formats = {
        '1': 'html',
        '2': 'json',
        '3': 'txt'
    }
    
    print(f"\n{Fore.CYAN}Formats disponibles:{Style.RESET_ALL}")
    print("1. HTML (recommand√©)")
    print("2. JSON")
    print("3. TXT")
    
    choice = input(f"\n{Fore.GREEN}Format (1-3): {Style.RESET_ALL}").strip()
    return formats.get(choice, 'html')

@handle_errors
def handle_batch_analysis():
    """G√®re l'analyse en lot"""
    print_info("üìÅ Analyse en lot")
    print_info("Vous pouvez analyser plusieurs domaines depuis un fichier ou en saisie manuelle")
    
    choice = input("\n1. Depuis un fichier\n2. Saisie manuelle\nChoix (1-2): ").strip()
    
    domains = []
    
    if choice == '1':
        filename = input("Nom du fichier: ").strip()
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                domains = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        except FileNotFoundError:
            print_error(f"‚ùå Fichier '{filename}' introuvable")
            input("Appuyez sur Entr√©e pour continuer...")
            return
    
    elif choice == '2':
        print_info("Saisissez les domaines (ligne vide pour terminer):")
        while True:
            domain = input("Domaine: ").strip()
            if not domain:
                break
            if validate_domain(domain):
                domains.append(domain.lower())
            else:
                print_warning(f"‚ö†Ô∏è  Domaine invalide ignor√©: {domain}")
    
    if not domains:
        print_warning("‚ö†Ô∏è  Aucun domaine valide √† analyser")
        input("Appuyez sur Entr√©e pour continuer...")
        return
    
    print_info(f"üöÄ Analyse de {len(domains)} domaine(s)...")
    
    success_count = 0
    for i, domain in enumerate(domains, 1):
        try:
            print_info(f"\n[{i}/{len(domains)}] Analyse de: {domain}")
            
            analyzer = DomainAnalyzer(domain, verbose=False)
            results = analyzer.run_standard_analysis()
            
            # Export automatique
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"batch_{domain.replace('.', '_')}_{timestamp}.json"
            
            if analyzer.export_results(results, filename, 'json'):
                success_count += 1
            
            # Pause entre analyses
            if i < len(domains):
                time.sleep(2)
        
        except Exception as e:
            print_error(f"‚ùå Erreur pour {domain}: {str(e)}")
            logger.error(f"Erreur batch {domain}: {str(e)}")
    
    print_info(f"\nüìä R√©sultats: {success_count}/{len(domains)} analyses r√©ussies")
    input("Appuyez sur Entr√©e pour continuer...")

@handle_errors
def handle_monitoring():
    """G√®re le monitoring des domaines"""
    print_info("üìà Syst√®me de monitoring")
    print_info("Fonctionnalit√© en d√©veloppement...")
    input("Appuyez sur Entr√©e pour continuer...")

@handle_errors
def handle_comparative_analysis():
    """G√®re l'analyse comparative"""
    print_info("üìä Analyse comparative")
    print_info("Fonctionnalit√© en d√©veloppement...")
    input("Appuyez sur Entr√©e pour continuer...")

@handle_errors
def handle_system_check():
    """V√©rifie le syst√®me et les d√©pendances"""
    print_info("‚öôÔ∏è  V√©rification du syst√®me...")
    
    checks = [
        ("Python", sys.version_info >= (3, 7), f"Version: {sys.version}"),
        ("dnspython", DNS_AVAILABLE, "R√©solution DNS"),
        ("colorama", COLORS_AVAILABLE, "Affichage color√©"),
        ("requests", True, "Requ√™tes HTTP"),
        ("Cache", cache.enabled, f"Dossier: {cache.cache_dir}"),
        ("Reports", REPORTS_DIR.exists(), f"Dossier: {REPORTS_DIR}"),
        ("Logs", LOGS_DIR.exists(), f"Dossier: {LOGS_DIR}")
    ]
    
    print_section("V√âRIFICATION SYST√àME")
    
    for name, status, info in checks:
        if status:
            print_success(f"‚úÖ {name}: {info}")
        else:
            print_error(f"‚ùå {name}: {info}")
    
    input("\nAppuyez sur Entr√©e pour continuer...")

@handle_errors
def handle_cache_management():
    """G√®re le cache"""
    try:
        stats = cache.get_stats()
        
        print_section("GESTION DU CACHE")
        print_info(f"üìÅ Fichiers: {stats['files']}")
        print_info(f"üíæ Taille: {stats['total_size_mb']} MB")
        print_info(f"üìä Statut: {'Activ√©' if stats['enabled'] else 'D√©sactiv√©'}")
        
        if stats['files'] > 0:
            choice = input("\nActions:\n1. Vider tout le cache\n2. Retour\nChoix: ").strip()
            
            if choice == '1':
                confirm = input("Confirmer la suppression ? (o/N): ").strip().lower()
                if confirm.startswith('o'):
                    cache.clear()
                    print_success("‚úÖ Cache vid√©")
    
    except Exception as e:
        print_error(f"‚ùå Erreur cache: {str(e)}")
    
    input("\nAppuyez sur Entr√©e pour continuer...")

def show_help():
    """Affiche l'aide"""
    clear_screen()
    print_banner()
    
    help_text = """
üìñ GUIDE D'UTILISATION NETTRACE

üéØ TYPES D'ANALYSE
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ Rapide    : WHOIS + DNS + Technologies de base (< 30s)
‚Ä¢ Standard  : + S√©curit√© + R√©putation basique (< 1min)
‚Ä¢ Compl√®te  : + G√©olocalisation + Sous-domaines (< 2min)

üîç FONCTIONNALIT√âS
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ Analyse WHOIS compl√®te avec dates et propri√©taire
‚Ä¢ R√©solution DNS multi-enregistrements (A, MX, NS, TXT...)
‚Ä¢ D√©tection de 50+ technologies web (frameworks, CMS, CDN)
‚Ä¢ Analyse de s√©curit√© (SSL, headers, redirections HTTPS)
‚Ä¢ G√©olocalisation des serveurs avec informations ISP
‚Ä¢ Recherche de sous-domaines via Certificate Transparency
‚Ä¢ Scores intelligents (confiance, s√©curit√©, r√©putation)
‚Ä¢ Export HTML magnifique + JSON/TXT
‚Ä¢ Cache intelligent pour optimiser les performances

üìä SCORING
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ Score de confiance : Anciennet√© + DNS + Sous-domaines + WHOIS
‚Ä¢ Score de s√©curit√©  : SSL + Headers + HTTPS + Technologies
‚Ä¢ Score de r√©putation: V√©rification listes malware + VirusTotal

üõ°Ô∏è √âTHIQUE & L√âGALIT√â
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ 100% l√©gal - Sources publiques uniquement (OSINT)
‚Ä¢ Pas de scan actif ou intrusif
‚Ä¢ Respect des rate limits et robots.txt
‚Ä¢ Toutes les analyses sont passives

‚ö° OPTIMISATION
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ Cache intelligent avec TTL diff√©renci√©
‚Ä¢ Requ√™tes parall√®les pour les performances
‚Ä¢ Gestion robuste des timeouts et erreurs
‚Ä¢ Limitation automatique du taux de requ√™tes

üé® EXPORT HTML
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ Design moderne avec glassmorphism
‚Ä¢ Responsive et mobile-friendly
‚Ä¢ Scores color√©s avec indicateurs visuels
‚Ä¢ Informations organis√©es en cartes √©l√©gantes
    """
    
    print(help_text)
    input("\nAppuyez sur Entr√©e pour continuer...")

def show_examples():
    """Affiche des exemples d'utilisation"""
    clear_screen()
    print_banner()
    
    examples_text = """
üí° EXEMPLES PRATIQUES

üîç CAS D'USAGE COURANTS
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

1. üïµÔ∏è RECONNAISSANCE PASSIVE
   ‚Ä¢ Analyser un domaine suspect avant visite
   ‚Ä¢ V√©rifier la l√©gitimit√© d'un site web
   ‚Ä¢ Identifier les technologies utilis√©es

2. üõ°Ô∏è AUDIT DE S√âCURIT√â
   ‚Ä¢ V√©rifier les headers de s√©curit√©
   ‚Ä¢ Analyser la configuration SSL/TLS
   ‚Ä¢ D√©tecter les redirections HTTPS

3. üìä VEILLE CONCURRENTIELLE
   ‚Ä¢ Identifier les technologies concurrentes
   ‚Ä¢ Analyser l'infrastructure d'h√©bergement
   ‚Ä¢ D√©couvrir les sous-domaines publics

4. üîí ANALYSE DE R√âPUTATION
   ‚Ä¢ V√©rifier si un domaine est blacklist√©
   ‚Ä¢ Consulter les bases de donn√©es de malware
   ‚Ä¢ Analyser les certificats SSL suspects

üìã EXEMPLES DE COMMANDES
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# Ligne de commande
python nettrace.py -d google.com -f html -o rapport.html
python nettrace.py -d example.com -v
python nettrace.py --batch-file domains.txt -f json

# Mode interactif (recommand√©)
python nettrace.py -i

üéØ DOMAINES DE TEST
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ google.com     : Site √©tabli avec toutes les technologies
‚Ä¢ github.com     : Plateforme moderne avec s√©curit√© avanc√©e
‚Ä¢ example.com    : Domaine de test basique
‚Ä¢ badssl.com     : Tests de certificats SSL
‚Ä¢ httpbin.org    : Tests d'APIs et headers HTTP

‚ö†Ô∏è BONNES PRATIQUES
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ Toujours respecter les conditions d'utilisation
‚Ä¢ Ne pas abuser des requ√™tes (rate limiting)
‚Ä¢ Utiliser le cache pour √©viter les requ√™tes r√©p√©titives
‚Ä¢ Exporter en HTML pour une meilleure lisibilit√©
‚Ä¢ Activer le mode verbeux pour le d√©bogage
    """
    
    print(examples_text)
    input("\nAppuyez sur Entr√©e pour continuer...")